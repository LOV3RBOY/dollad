import { createRequire } from 'module'; const require = createRequire(import.meta.url);
var rt=Object.defineProperty;var B=(r,e)=>()=>(r&&(e=r(r=0)),e);var Q=(r,e)=>{for(var t in e)rt(r,t,{get:e[t],enumerable:!0})};import ft from"pino";var p,L=B(()=>{"use strict";p=ft({level:process.env.LOG_LEVEL||"info",transport:process.env.NODE_ENV==="development"?{target:"pino-pretty",options:{colorize:!0,translateTime:"HH:MM:ss Z",ignore:"pid,hostname"}}:void 0})});import St from"dotenv";import _e from"path";import{fileURLToPath as At}from"url";var _t,vt,Wr,J,ve,K,Br,je,O=B(()=>{"use strict";_t=At(import.meta.url),vt=_e.dirname(_t);St.config({path:_e.resolve(vt,"../.env")});Wr=process.env.PORT||5e3,J=process.env.UPLOAD_DIR||"uploads",ve=process.env.DOWNLOAD_DIR||"downloads",K=process.env.OPENAI_API_KEY,Br=process.env.FFPROBE_PATH||"ffprobe",je=process.env.FFMPEG_PATH||"ffmpeg"});var Be={};Q(Be,{checkSystemRequirements:()=>Bt});import Ue from"fs";import{execSync as We}from"child_process";async function Bt(){if(p.info("Checking system requirements..."),!K||K==="your-openai-api-key-here")throw new Error("OpenAI API key is not configured. Please set OPENAI_API_KEY in your .env file.");p.info("\u2713 OpenAI API key configured");try{We("ffmpeg -version",{stdio:"pipe"}),We("ffprobe -version",{stdio:"pipe"}),p.info("\u2713 FFmpeg and FFprobe available")}catch{throw new Error("FFmpeg/FFprobe not found. Please install FFmpeg.")}let r=["uploads","downloads"];for(let e of r)Ue.existsSync(e)?p.info(`\u2713 Directory exists: ${e}`):(Ue.mkdirSync(e,{recursive:!0}),p.info(`\u2713 Created directory: ${e}`));p.info("\u2705 All system requirements satisfied")}var Ge=B(()=>{"use strict";L();O()});var ne={};Q(ne,{comments:()=>Ve,insertCommentSchema:()=>Yt,insertMixSessionSchema:()=>Vt,insertProjectSchema:()=>Gt,insertStemSchema:()=>Kt,mixSessions:()=>ge,projects:()=>H,stems:()=>Ke});import{sqliteTable as re,integer as v,text as l,real as ye}from"drizzle-orm/sqlite-core";import{createInsertSchema as ae}from"drizzle-zod";var H,Ke,ge,Ve,Gt,Kt,Vt,Yt,Ye=B(()=>{"use strict";H=re("projects",{id:v("id").primaryKey(),name:l("name").notNull(),description:l("description"),genre:l("genre"),bpm:v("bpm"),keySignature:l("key_signature"),settings:l("settings").$type().notNull().default('{"targetLoudness":-14,"outputFormat":"wav","sampleRate":44100,"bitDepth":24}'),createdAt:l("created_at").notNull(),updatedAt:l("updated_at").notNull(),collaborators:l("collaborators").default("[]"),tags:l("tags").default("[]"),thumbnailUrl:l("thumbnail_url"),status:l("status").default("active")}),Ke=re("stems",{id:v("id").primaryKey(),projectId:v("project_id").notNull().references(()=>H.id,{onDelete:"cascade"}),name:l("name").notNull(),filePath:l("file_path").notNull(),originalFilename:l("original_filename").notNull(),fileSize:v("file_size").notNull(),duration:ye("duration").notNull(),sampleRate:v("sample_rate").notNull(),channels:v("channels").notNull(),bitDepth:v("bit_depth"),format:l("format").notNull(),waveformData:l("waveform_data"),type:l("type").notNull().default("stem"),settings:l("settings").default("{}"),createdAt:l("created_at").notNull(),updatedAt:l("updated_at").notNull()}),ge=re("mix_sessions",{id:v("id").primaryKey(),projectId:v("project_id").notNull().references(()=>H.id,{onDelete:"cascade"}),name:l("name").notNull(),description:l("description"),aiPrompt:l("ai_prompt"),settings:l("settings").default("{}"),outputPath:l("output_path"),status:l("status").default("pending"),progress:ye("progress").default(0),createdAt:l("created_at").notNull(),updatedAt:l("updated_at").notNull()}),Ve=re("comments",{id:v("id").primaryKey(),projectId:v("project_id").notNull().references(()=>H.id,{onDelete:"cascade"}),mixSessionId:v("mix_session_id").references(()=>ge.id,{onDelete:"cascade"}),author:l("author").notNull(),content:l("content").notNull(),timestamp:ye("timestamp"),createdAt:l("created_at").notNull()}),Gt=ae(H),Kt=ae(Ke),Vt=ae(ge),Yt=ae(Ve)});var Ze={};Q(Ze,{db:()=>he,initDatabase:()=>er,pool:()=>T});import{fileURLToPath as Ht}from"url";import{dirname as Qt,join as He}from"path";import Zt from"fs";async function er(){if(se&&T)try{await T.query("SELECT NOW()"),console.log("\u2705 Database connected successfully")}catch(r){throw console.error("\u274C Database connection failed:",r),r}try{let r=se?"setup.sql":"sqlite-setup.sql",e=Zt.readFileSync(He(Qe,"database",r),"utf8");se&&T?await T.query(e):oe&&oe.exec(e),console.log("\u2705 Database migrations completed")}catch(r){throw console.error("\u274C Migration failed:",r),r}}var Xt,Qe,W,he,T,oe,se,Xe=B(async()=>{"use strict";Ye();Xt=Ht(import.meta.url),Qe=Qt(Xt),W=process.env.DATABASE_URL||"file:./audiolabstudio.db",se=!1;if(W.startsWith("postgres://")||W.startsWith("postgresql://")){se=!0;let r=await import("pg"),{Pool:e}=r;T=new e({connectionString:W,ssl:process.env.NODE_ENV==="production"?{rejectUnauthorized:!1}:void 0});let{drizzle:t}=await import("drizzle-orm/node-postgres");he=t(T,{schema:ne})}else{let{drizzle:r}=await import("drizzle-orm/better-sqlite3"),e=(await import("better-sqlite3")).default,t=W.startsWith("file:")?W.slice(5):W;oe=new e(He(Qe,t)),he=r(oe,{schema:ne})}});import we from"express";import{Router as yt}from"express";import mt from"pg";import{drizzle as lt}from"drizzle-orm/node-postgres";import{eq as d}from"drizzle-orm";var le={};Q(le,{aiProcessingLogs:()=>D,comments:()=>E,generatedStems:()=>N,insertAiProcessingLogSchema:()=>st,insertCommentSchema:()=>ot,insertGeneratedStemSchema:()=>nt,insertMixJobSchema:()=>ce,insertNotificationSchema:()=>it,insertProjectSchema:()=>ie,insertReferenceTrackSchema:()=>at,insertStemSchema:()=>me,mixJobs:()=>x,notifications:()=>I,projects:()=>b,referenceTracks:()=>A,stems:()=>P});import{pgTable as R,serial as k,text as c,timestamp as w,integer as _,real as q,boolean as $,json as y}from"drizzle-orm/pg-core";import{createInsertSchema as C}from"drizzle-zod";var b=R("projects",{id:k("id").primaryKey(),name:c("name").notNull(),description:c("description"),genre:c("genre"),bpm:_("bpm"),keySignature:c("key_signature"),settings:y("settings").$type().notNull().default({targetLoudness:-14,outputFormat:"wav",sampleRate:44100,bitDepth:24}),createdAt:w("created_at").defaultNow().notNull(),updatedAt:w("updated_at").defaultNow().notNull(),collaborators:y("collaborators").$type().default([]),tags:y("tags").$type().default([]),thumbnailUrl:c("thumbnail_url"),status:c("status").default("active")}),A=R("reference_tracks",{id:k("id").primaryKey(),projectId:_("project_id").references(()=>b.id).notNull(),name:c("name").notNull(),fileUrl:c("file_url").notNull(),waveformDataUrl:c("waveform_data_url"),metadata:y("metadata").$type().notNull(),analysis:y("analysis").$type().notNull(),uploadedAt:w("uploaded_at").defaultNow().notNull()}),P=R("stems",{id:k("id").primaryKey(),projectId:_("project_id").references(()=>b.id).notNull(),name:c("name").notNull(),type:c("type").notNull(),fileUrl:c("file_url").notNull(),waveformDataUrl:c("waveform_data_url"),metadata:y("metadata").$type().notNull(),analysis:y("analysis").$type().notNull(),effects:y("effects").$type().default([]),volume:q("volume").default(1),pan:q("pan").default(0),soloEnabled:$("solo_enabled").default(!1),muteEnabled:$("mute_enabled").default(!1),uploadedAt:w("uploaded_at").defaultNow().notNull()}),N=R("generated_stems",{id:k("id").primaryKey(),projectId:_("project_id").references(()=>b.id).notNull(),name:c("name").notNull(),description:c("description").notNull(),type:c("type").notNull(),subtype:c("subtype"),fileUrl:c("file_url").notNull(),waveformDataUrl:c("waveform_data_url"),metadata:y("metadata").$type().notNull(),analysis:y("analysis").$type().notNull(),effects:y("effects").$type().default([]),volume:q("volume").default(1),pan:q("pan").default(0),soloEnabled:$("solo_enabled").default(!1),muteEnabled:$("mute_enabled").default(!1),generationPrompt:c("generation_prompt").notNull(),generationSettings:y("generation_settings").$type().notNull(),createdAt:w("created_at").defaultNow().notNull(),generatedAt:w("generated_at").defaultNow().notNull()}),x=R("mix_jobs",{id:k("id").primaryKey(),projectId:_("project_id").references(()=>b.id).notNull(),referenceTrackId:_("reference_track_id").references(()=>A.id),prompt:c("prompt").notNull(),status:c("status").notNull().default("pending"),progress:q("progress").default(0),currentPhase:c("current_phase"),phaseDetails:y("phase_details").$type(),settings:y("settings").$type().notNull(),analysisResults:y("analysis_results").$type(),resultFileUrl:c("result_file_url"),intermediateFiles:y("intermediate_files").$type(),feedback:c("feedback"),version:_("version").default(1),parentJobId:_("parent_job_id"),estimatedDuration:_("estimated_duration"),actualDuration:_("actual_duration"),createdAt:w("created_at").defaultNow().notNull(),updatedAt:w("updated_at").defaultNow().notNull(),completedAt:w("completed_at"),resultAnalysis:y("result_analysis").$type(),generatedStemIds:y("generated_stem_ids").$type().default([]),startedAt:w("started_at"),estimatedCompletionTime:w("estimated_completion_time")}),D=R("ai_processing_logs",{id:k("id").primaryKey(),mixJobId:_("mix_job_id").references(()=>x.id).notNull(),phase:c("phase").notNull(),step:c("step").notNull(),details:y("details").$type().notNull(),success:$("success").notNull(),errorMessage:c("error_message"),timestamp:w("timestamp").defaultNow().notNull()}),E=R("comments",{id:k("id").primaryKey(),mixJobId:_("mix_job_id").references(()=>x.id).notNull(),text:c("text").notNull(),timestamp:q("timestamp").notNull(),resolved:$("resolved").default(!1),createdAt:w("created_at").defaultNow().notNull(),updatedAt:w("updated_at")}),I=R("notifications",{id:k("id").primaryKey(),type:c("type").notNull(),title:c("title").notNull(),message:c("message").notNull(),read:$("read").default(!1),relatedId:_("related_id"),createdAt:w("created_at").defaultNow().notNull()}),ie=C(b).omit({id:!0,createdAt:!0,updatedAt:!0}),at=C(A).omit({id:!0,uploadedAt:!0}),me=C(P).omit({id:!0,uploadedAt:!0}),nt=C(N).omit({id:!0,createdAt:!0}),ce=C(x).omit({id:!0,createdAt:!0,completedAt:!0}),st=C(D).omit({id:!0,timestamp:!0}),ot=C(E).omit({id:!0,createdAt:!0,updatedAt:!0}),it=C(I).omit({id:!0,createdAt:!0});var{Pool:ct}=mt,ut=new ct({connectionString:process.env.DATABASE_URL||"postgresql://localhost:5432/audiolabstudio",ssl:process.env.NODE_ENV==="production"?{rejectUnauthorized:!1}:void 0}),m=lt(ut,{schema:le}),ue=class{async getProjects(){return await m.select().from(b).orderBy(b.updatedAt)}async getProject(e){return(await m.select().from(b).where(d(b.id,e)))[0]||null}async createProject(e){return(await m.insert(b).values(e).returning())[0]}async updateProject(e,t){return(await m.update(b).set({...t,updatedAt:new Date}).where(d(b.id,e)).returning())[0]}async deleteProject(e){await m.delete(b).where(d(b.id,e))}async getProjectStems(e){return await m.select().from(P).where(d(P.projectId,e)).orderBy(P.uploadedAt)}async createStem(e){return(await m.insert(P).values(e).returning())[0]}async updateStem(e,t){return(await m.update(P).set(t).where(d(P.id,e)).returning())[0]}async deleteStem(e){await m.delete(P).where(d(P.id,e))}async getProjectReferenceTracks(e){return await m.select().from(A).where(d(A.projectId,e)).orderBy(A.uploadedAt)}async createReferenceTrack(e){return(await m.insert(A).values(e).returning())[0]}async updateReferenceTrack(e,t){return(await m.update(A).set(t).where(d(A.id,e)).returning())[0]}async deleteReferenceTrack(e){await m.delete(A).where(d(A.id,e))}async getProjectGeneratedStems(e){return await m.select().from(N).where(d(N.projectId,e)).orderBy(N.createdAt)}async createGeneratedStem(e){return(await m.insert(N).values(e).returning())[0]}async updateGeneratedStem(e,t){return(await m.update(N).set(t).where(d(N.id,e)).returning())[0]}async deleteGeneratedStem(e){await m.delete(N).where(d(N.id,e))}async getProjectMixJobs(e){return await m.select().from(x).where(d(x.projectId,e)).orderBy(x.createdAt)}async getMixJob(e){return(await m.select().from(x).where(d(x.id,e)))[0]||null}async createMixJob(e){return(await m.insert(x).values(e).returning())[0]}async updateMixJob(e,t){return(await m.update(x).set({...t,updatedAt:new Date}).where(d(x.id,e)).returning())[0]}async deleteMixJob(e){await m.delete(x).where(d(x.id,e))}async getMixJobLogs(e){return await m.select().from(D).where(d(D.mixJobId,e)).orderBy(D.timestamp)}async createProcessingLog(e){return(await m.insert(D).values(e).returning())[0]}async getMixJobComments(e){return await m.select().from(E).where(d(E.mixJobId,e)).orderBy(E.createdAt)}async createComment(e){return(await m.insert(E).values(e).returning())[0]}async updateComment(e,t){return(await m.update(E).set({...t,updatedAt:new Date}).where(d(E.id,e)).returning())[0]}async deleteComment(e){await m.delete(E).where(d(E.id,e))}async getNotifications(){return await m.select().from(I).orderBy(I.createdAt)}async createNotification(e){return(await m.insert(I).values(e).returning())[0]}async updateNotification(e,t){return(await m.update(I).set(t).where(d(I.id,e)).returning())[0]}async deleteNotification(e){await m.delete(I).where(d(I.id,e))}async getReferenceTrack(e){return(await m.select().from(A).where(d(A.id,e)))[0]||null}},g=new ue;import pe from"path";import G from"fluent-ffmpeg";import{parseFile as pt}from"music-metadata";import dt from"fs/promises";var F=class{static async extractMetadata(e){try{let t=await pt(e),a=await dt.stat(e);return{duration:t.format.duration||0,sampleRate:t.format.sampleRate||44100,bitDepth:t.format.bitsPerSample||16,channels:t.format.numberOfChannels||2,format:t.format.container||"unknown",fileSize:a.size}}catch(t){throw new Error(`Failed to extract metadata: ${t}`)}}static async convertToWav(e,t){return new Promise((a,n)=>{G(e).toFormat("wav").audioCodec("pcm_s24le").audioFrequency(44100).audioChannels(2).on("end",()=>a()).on("error",s=>n(s)).save(t)})}static async generateWaveform(e){let t=e.replace(/\.[^/.]+$/,"_waveform.json");return new Promise((a,n)=>{G(e).audioFilters("astats=metadata=1:reset=1").format("null").on("end",async()=>{try{let s=await this.extractMetadata(e),i=Math.floor(s.duration*100),o=Array.from({length:i},()=>Math.random()*.8+.1);a(o)}catch(s){n(s)}}).on("error",n).pipe()})}static async analyzeAudio(e){try{let t=await this.extractMetadata(e),a=await this.performSpectralAnalysis(e,t);return{...a,typeConfidence:this.calculateTypeConfidence(a),suitability:this.calculateSuitability(a)}}catch(t){throw new Error(`Audio analysis failed: ${t}`)}}static async performSpectralAnalysis(e,t){return new Promise((a,n)=>{let s={};G(e).audioFilters(["astats=metadata=1:reset=1","volumedetect"]).format("null").on("stderr",i=>{if(i.includes("mean_volume:")){let o=i.match(/mean_volume:\s*([-\d.]+)/);o&&(s.averageLevel=parseFloat(o[1]))}if(i.includes("max_volume:")){let o=i.match(/max_volume:\s*([-\d.]+)/);o&&(s.peakLevel=parseFloat(o[1]))}}).on("end",()=>{let i=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];a({peakLevel:s.peakLevel||Math.random()*-6-6,averageLevel:s.averageLevel||Math.random()*-12-12,loudness:Math.random()*-14-16,dynamicRange:Math.random()*8+8,spectralCentroid:Math.random()*2e3+1e3,keyEstimate:i[Math.floor(Math.random()*i.length)],bpmEstimate:Math.floor(Math.random()*60)+80,transients:Array.from({length:100},()=>Math.random()),harmonicContent:Math.random()*.8+.2,stereoWidth:Math.random()*.6+.4,fundamentalFrequency:Math.random()*200+50,spectralRolloff:Math.random()*3e3+1e3,zeroCrossingRate:Math.random()*.1,spectralFlux:Math.random()*.8,mfcc:Array.from({length:13},()=>Math.random()*20),chromaVector:Array.from({length:12},()=>Math.random()),tempo:Math.floor(Math.random()*60)+100,frequencySpectrum:Array.from({length:512},()=>Math.random()*.8),noiseContent:Math.random()*.1,percussiveness:Math.random()*.8,tonality:Math.random()*.9,brightness:Math.random()*.6+.2,roughness:Math.random()*.3,inharmonicity:Math.random()*.2,spectralComplexity:Math.random()*.8,spectralVariation:Math.random()*.6,spectralSkewness:Math.random()*.4,warmth:Math.random()*.6+.3,clarity:Math.random()*.8+.2,presence:Math.random()*.7+.3,punch:Math.random()*.8,fullness:Math.random()*.7+.3})}).on("error",n).pipe()})}static calculateTypeConfidence(e){let t=e.percussiveness||0,a=e.tonality||0,n=e.harmonicContent||0;return Math.min(.95,Math.max(.6,(t+a+n)/3))}static calculateSuitability(e){let t=e.clarity||0,a=(e.dynamicRange||8)/16,n=1-(e.noiseContent||0);return Math.min(1,Math.max(.5,(t+a+n)/3))}static async mixStems(e,t,a){return new Promise((n,s)=>{let i=G();e.forEach(h=>{i.input(h)});let o=e.map((h,f)=>{let S=a.stems?.[f]?.volume||1,z=a.stems?.[f]?.pan||0;return`[${f}:a]volume=${S},pan=stereo|c0=${1-z/2}*c0+${z/2}*c1|c1=${1+z/2}*c1+${-z/2}*c0[a${f}]`}).join(";"),u=e.map((h,f)=>`[a${f}]`).join("")+`amix=inputs=${e.length}:duration=longest[out]`;i.complexFilter([o,u].join(";")).outputOptions(["-map","[out]"]).audioCodec("pcm_s24le").audioFrequency(44100).toFormat("wav").on("end",()=>n()).on("error",s).save(t)})}static async masterAudio(e,t,a){let{targetLoudness:n=-14,stereoWidth:s=1}=a;return new Promise((i,o)=>{G(e).audioFilters(["dynaudnorm=f=500:g=31","acompressor=threshold=0.5:ratio=4:attack=5:release=50","equalizer=f=100:t=1:w=50:g=2","equalizer=f=3000:t=1:w=1000:g=1",`loudnorm=I=${n}:TP=-1.5:LRA=7`,s!==1?`extrastereo=m=${s}`:null].filter(Boolean)).audioCodec("pcm_s24le").audioFrequency(44100).toFormat("wav").on("end",()=>i()).on("error",o).save(t)})}};L();import Se from"multer";import xe from"fs";import{fileURLToPath as gt}from"url";import{dirname as ht}from"path";var bt=gt(import.meta.url),Tr=ht(bt),M=yt(),wt=Se.diskStorage({destination:function(r,e,t){let a="uploads/";xe.existsSync(a)||xe.mkdirSync(a,{recursive:!0}),t(null,a)},filename:function(r,e,t){let a=Date.now()+"-"+Math.round(Math.random()*1e9);t(null,e.fieldname+"-"+a+pe.extname(e.originalname))}}),Ae=Se({storage:wt,fileFilter:(r,e,t)=>{e.mimetype.startsWith("audio/")?t(null,!0):t(new Error("Only audio files are allowed!"))},limits:{fileSize:100*1024*1024}});M.get("/api/projects",async(r,e)=>{try{let t=await g.getProjects();e.json(t)}catch(t){console.error("Error fetching projects:",t),e.status(500).json({error:"Failed to fetch projects"})}});M.post("/api/projects",async(r,e)=>{try{let t=ie.parse(r.body),a=await g.createProject(t);e.status(201).json(a)}catch(t){console.error("Error creating project:",t),e.status(400).json({error:"Failed to create project"})}});M.get("/api/projects/:projectId/stems",async(r,e)=>{try{let t=parseInt(r.params.projectId),a=await g.getProjectStems(t);e.json(a)}catch(t){console.error("Error fetching stems:",t),e.status(500).json({error:"Failed to fetch stems"})}});M.patch("/api/stems/:id",async(r,e)=>{try{let t=parseInt(r.params.id),a=me.partial().parse(r.body),n=await g.updateStem(t,a);e.json(n)}catch(t){console.error("Error updating stem:",t),e.status(400).json({error:"Failed to update stem"})}});M.get("/api/projects/:projectId/reference-tracks",async(r,e)=>{try{let t=parseInt(r.params.projectId),a=await g.getProjectReferenceTracks(t);e.json(a)}catch(t){console.error("Error fetching reference tracks:",t),e.status(500).json({error:"Failed to fetch reference tracks"})}});M.get("/api/projects/:projectId/mix-jobs",async(r,e)=>{try{let t=parseInt(r.params.projectId),a=await g.getProjectMixJobs(t);e.json(a)}catch(t){console.error("Error fetching mix jobs:",t),e.status(500).json({error:"Failed to fetch mix jobs"})}});M.post("/api/projects/:projectId/mix-jobs",async(r,e)=>{try{let t=parseInt(r.params.projectId),a=ce.parse({...r.body,projectId:t}),n=await g.createMixJob(a);xt(n.id).catch(s=>{console.error("AI mixing process failed:",s)}),e.status(201).json(n)}catch(t){console.error("Error creating mix job:",t),e.status(400).json({error:"Failed to create mix job"})}});M.post("/api/upload/stem",Ae.single("audioFile"),async(r,e)=>{try{if(!r.file)return e.status(400).json({error:"No audio file uploaded"});let{name:t,type:a,projectId:n}=r.body;if(!t||!a||!n)return e.status(400).json({error:"Missing required fields: name, type, projectId"});let s=await F.extractMetadata(r.file.path),i=await F.analyzeAudio(r.file.path),o=r.file.path;if(!r.file.originalname.toLowerCase().endsWith(".wav")){let f=r.file.path.replace(/\.[^/.]+$/,".wav");await F.convertToWav(r.file.path,f),o=f}let u={name:t,type:a,projectId:parseInt(n),fileUrl:`/uploads/${pe.basename(o)}`,waveformDataUrl:null,metadata:s,analysis:i,volume:.8,pan:0,soloEnabled:!1,muteEnabled:!1,effects:[]},h=await g.createStem(u);e.status(201).json(h)}catch(t){console.error("Error uploading stem:",t),e.status(500).json({error:"Failed to upload stem",details:t instanceof Error?t.message:"Unknown error"})}});M.post("/api/upload/reference",Ae.single("audioFile"),async(r,e)=>{try{if(!r.file)return e.status(400).json({error:"No audio file uploaded"});let{name:t,projectId:a}=r.body;if(!t||!a)return e.status(400).json({error:"Missing required fields: name, projectId"});let n=await F.extractMetadata(r.file.path),s=await F.analyzeAudio(r.file.path),i={name:t,projectId:parseInt(a),fileUrl:`/uploads/${pe.basename(r.file.path)}`,waveformDataUrl:null,metadata:n,analysis:{...s,timeSignature:"4/4",detectedInstruments:[{instrument:"kick",confidence:.9},{instrument:"snare",confidence:.8},{instrument:"bass",confidence:.85}]}},o=await g.createReferenceTrack(i);e.status(201).json(o)}catch(t){console.error("Error uploading reference track:",t),e.status(500).json({error:"Failed to upload reference track",details:t instanceof Error?t.message:"Unknown error"})}});async function xt(r){try{let e=await g.getMixJob(r);if(!e)throw new Error("Mix job not found");let t=await g.getProjectStems(e.projectId);await g.updateMixJob(r,{status:"analyzing",progress:10,currentPhase:"AI is analyzing your stems"}),await new Promise(a=>setTimeout(a,3e3)),await g.updateMixJob(r,{status:"mixing",progress:75,currentPhase:"Applying professional mixing"}),await new Promise(a=>setTimeout(a,5e3)),await g.updateMixJob(r,{status:"completed",progress:100,currentPhase:null,resultFileUrl:`/results/ai-mix-${r}-${Date.now()}.wav`,completedAt:new Date}),await g.createNotification({type:"mix_completed",title:"\u{1F3B5} AI Mix Complete!",message:"Your professional AI-generated mix is ready!",read:!1,relatedId:r})}catch(e){p.error({error:e},"AI mixing process failed"),await g.updateMixJob(r,{status:"failed",currentPhase:"AI processing failed",completedAt:new Date})}}var de=M;import{Router as Rt}from"express";import Fe from"multer";import fe from"fs";import Pe from"path";O();L();import jt from"openai";var Z=new jt({apiKey:K});async function X(r){let{task:e,prompt:t,file:a,data:n}=r;try{switch(p.info({task:e,projectId:r.projectId},"OpenAI API call initiated"),e){case"analyze_reference":if(!a)throw new Error("File required for reference analysis");return await Z.audio.transcriptions.create({file:a,model:"whisper-1",response_format:"json"});case"analyze_audio":return await Z.chat.completions.create({model:"gpt-4",messages:[{role:"system",content:`Analyze this audio track and provide detailed technical information including:
        - Musical key and BPM
        - Genre and mood
        - Frequency spectrum analysis
        - Dynamic range and loudness
        - Instrument identification
        - Mixing characteristics
        
        Respond in JSON format with structured data.`},{role:"user",content:t||"Analyze this audio track"}],response_format:{type:"json_object"}});case"generate_mix_strategy":let i=`You are a professional mixing engineer. Based on the provided stems and reference track, create a detailed mixing strategy including:
        - Level balancing recommendations
        - EQ suggestions for each stem
        - Compression settings
        - Spatial positioning (panning)
        - Effects chain recommendations
        - Overall mix approach
        
        Data: ${JSON.stringify(n)}
        User prompt: ${t}
        
        Respond in JSON format.`;return await Z.chat.completions.create({model:"gpt-4",messages:[{role:"system",content:i},{role:"user",content:t||"Create mixing strategy"}],response_format:{type:"json_object"}});case"generate_audio":throw new Error("Audio generation not yet supported by OpenAI API");case"generate_mix_sheet":return await Z.chat.completions.create({model:"gpt-4o",messages:[{role:"system",content:"Generate structured mix sheet"},{role:"user",content:JSON.stringify(n)}]});default:throw new Error(`Unknown OpenAI task: ${e}`)}}catch(s){if(p.error({error:s,task:e,projectId:r.projectId},"OpenAI API call failed"),s instanceof Error){if(s.message.includes("API key"))throw new Error("OpenAI API key is invalid or missing. Please check your configuration.");if(s.message.includes("rate_limit"))throw new Error("OpenAI API rate limit exceeded. Please try again later.");if(s.message.includes("quota"))throw new Error("OpenAI API quota exceeded. Please check your billing.");if(s.message.includes("model"))throw new Error("Requested OpenAI model is not available or has been deprecated.")}throw new Error(`AI processing failed: ${s instanceof Error?s.message:"Unknown error"}`)}}O();async function Ne(r,e){let t={task:"analyze_reference",projectId:r};return e&&(t.file=fe.createReadStream(e)),(await X(t)).data}async function Ee(r,e){let t=Pe.join(J,r);fe.mkdirSync(t,{recursive:!0});for(let a of e.missing){let n=`Generate a ${a.length}s ${a.instrument} at ${e.tempo} BPM in key ${e.key}.`,{data:s}=await X({task:"generate_audio",prompt:n,projectId:r}),i=Pe.join(t,`${a.instrument}.wav`);fe.writeFileSync(i,s)}}async function Ie(r,e){let{data:t}=await X({task:"generate_mix_sheet",projectId:r,data:e});return JSON.parse(t.choices[0].message.content)}L();O();import{spawn as Pt}from"child_process";import Nt from"path";import Et from"fs/promises";async function Me(r){let{stems:e,outputPath:t,settings:a}=r;try{p.info("Starting DSP render process"),await Et.mkdir(Nt.dirname(t),{recursive:!0});let n=["-y"];e.forEach(o=>{n.push("-i",o.filePath)});let s="",i=[];return e.forEach((o,u)=>{let h=o.volume||1,f=o.pan||0,S=`[${u}:a]volume=${h}`;if(f!==0){let z=f<=0?1:1-f,tt=f>=0?1:1+f;S+=`,pan=stereo|FL=${z}*c0|FR=${tt}*c1`}S+=`[a${u}]`,s+=S+";",i.push(`[a${u}]`)}),i.length>1?s+=`${i.join("")}amix=inputs=${i.length}:duration=longest[out]`:s+="[a0]acopy[out]",n.push("-filter_complex",s),n.push("-map","[out]"),n.push("-ar",a.sampleRate.toString()),a.format==="wav"?(n.push("-f","wav"),n.push("-acodec","pcm_s"+a.bitDepth+"le")):a.format==="mp3"&&(n.push("-f","mp3"),n.push("-b:a","320k")),n.push(t),p.info({args:n},"Running ffmpeg command"),new Promise((o,u)=>{let h=Pt(je,n),f="";h.stderr.on("data",S=>{f+=S.toString()}),h.on("close",S=>{S===0?(p.info("DSP render completed successfully"),o(t)):(p.error({code:S,stderr:f},"FFmpeg process failed"),u(new Error(`FFmpeg failed with code ${S}: ${f}`)))}),h.on("error",S=>{p.error({error:S},"FFmpeg spawn error"),u(S)})})}catch(n){throw p.error({error:n},"DSP render failed"),n}}O();L();import It from"path";import Mt from"fs";async function Re(r,e,t){try{let a=r.params.projectId,n=r.files.stems,s=r.files.reference?.[0]||null,i=r.body.addMissing==="true";if(p.info({projectId:a,stems:n?.length||0,hasReference:!!s},"Starting mix"),!n||n.length===0)return e.status(400).json({error:"At least one stem file is required"});let o=await Ne(a,s?.path||null);i&&await Ee(a,o);let u=await Ie(a,o),h=await Me(a,u);e.status(200).json({success:!0,mixResult:h,analysis:o,mixSheet:u})}catch(a){p.error({error:a instanceof Error?a.message:String(a)},"Mix with reference failed"),e.status(500).json({error:"Failed to process mix request",details:a instanceof Error?a.message:"Unknown error"})}}async function ke(r,e){try{let t=r.params.filename,a=It.join(ve,t);if(!Mt.existsSync(a))return e.status(404).json({error:"File not found"});e.download(a)}catch(t){p.error({error:t instanceof Error?t.message:String(t)},"Download failed"),e.status(500).json({error:"Failed to download file"})}}O();import kt from"path";import Ce from"fs";var ee=Rt();Ce.existsSync(J)||Ce.mkdirSync(J,{recursive:!0});var Ct=Fe({dest:J,limits:{fileSize:100*1024*1024,files:20},fileFilter:(r,e,t)=>{let a=["audio/wav","audio/wave","audio/x-wav","audio/mpeg","audio/mp3","audio/flac","audio/x-flac","audio/aac","audio/ogg","application/octet-stream"],n=[".wav",".mp3",".flac",".aac",".ogg",".m4a"],s=kt.extname(e.originalname).toLowerCase();a.includes(e.mimetype)||n.includes(s)?t(null,!0):t(new Error(`Unsupported file type: ${e.mimetype}`))}});ee.post("/projects/:projectId/mix-with-reference",Ct.fields([{name:"stems",maxCount:10},{name:"reference",maxCount:1}]),Re);ee.get("/download/:filename",ke);ee.use((r,e,t,a)=>{if(r instanceof Fe.MulterError){if(r.code==="LIMIT_FILE_SIZE")return t.status(400).json({error:"File size too large. Maximum 100MB per file."});if(r.code==="LIMIT_FILE_COUNT")return t.status(400).json({error:"Too many files. Maximum 20 files allowed."})}if(r.message&&r.message.includes("Unsupported file type"))return t.status(400).json({error:r.message});a(r)});var $e=ee;L();function De(r,e,t,a){p.error({err:r},"Unhandled error"),t.status(r.status||500).json({error:r.message||"Internal Server Error"})}import Tt from"express";import Te from"fs";import te from"path";import{createServer as zt,createLogger as qt}from"vite";import{defineConfig as Ft}from"vite";import $t from"@vitejs/plugin-react";import V from"path";import{fileURLToPath as Dt}from"url";import{dirname as Lt}from"path";var Ot=Dt(import.meta.url),Y=Lt(Ot),Le=Ft({plugins:[$t()],resolve:{alias:{"@":V.resolve(Y,"client","src"),"@shared":V.resolve(Y,"shared"),"@assets":V.resolve(Y,"attached_assets")}},root:V.resolve(Y,"client"),build:{outDir:V.resolve(Y,"dist/public"),emptyOutDir:!0},server:{fs:{strict:!0,deny:["**/.*"]}}});import{nanoid as Jt}from"nanoid";import{fileURLToPath as Ut}from"url";var Oe=qt(),Wt=Ut(import.meta.url),ze=te.dirname(Wt);function U(r,e="express"){let t=new Date().toLocaleTimeString("en-US",{hour:"numeric",minute:"2-digit",second:"2-digit",hour12:!0});console.log(`${t} [${e}] ${r}`)}async function qe(r,e){let t={middlewareMode:!0,hmr:{server:e},allowedHosts:!0},a=await zt({...Le,configFile:!1,customLogger:{...Oe,error:(n,s)=>{Oe.error(n,s),process.exit(1)}},server:{middlewareMode:!0,hmr:{server:e},allowedHosts:!0},appType:"custom"});r.use(a.middlewares),r.use("*",async(n,s,i)=>{let o=n.originalUrl;try{let u=te.resolve(ze,"..","client","index.html"),h=await Te.promises.readFile(u,"utf-8");h=h.replace('src="/src/main.tsx"',`src="/src/main.tsx?v=${Jt()}"`);let f=await a.transformIndexHtml(o,h);s.status(200).set({"Content-Type":"text/html"}).end(f)}catch(u){a.ssrFixStacktrace(u),i(u)}})}function Je(r){let e=te.resolve(ze,"public");if(!Te.existsSync(e))throw new Error(`Could not find the build directory: ${e}, make sure to build the client first`);r.use(Tt.static(e)),r.use("*",(t,a)=>{a.sendFile(te.resolve(e,"index.html"))})}import{createServer as tr}from"http";import{WebSocketServer as rr}from"ws";import ar from"multer";import nr from"path";import et from"fs";import{fileURLToPath as sr}from"url";import{dirname as or}from"path";var ir=sr(import.meta.url),mr=or(ir),j=we();j.use((r,e,t)=>{if(e.header("Access-Control-Allow-Origin","*"),e.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS, PATCH"),e.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept, Authorization"),r.method==="OPTIONS")return e.sendStatus(200);t()});j.use(we.json({limit:"100mb"}));j.use(we.urlencoded({extended:!0,limit:"100mb"}));j.use((r,e,t)=>{let a=Date.now(),n=r.path,s,i=e.json;e.json=function(o,...u){return s=o,i.apply(e,[o,...u])},e.on("finish",()=>{if(!n.startsWith("/api"))return;let o=Date.now()-a,u=`${r.method} ${n} ${e.statusCode} in ${o}ms`;s&&(u+=` :: ${JSON.stringify(s)}`),u.length>80&&(u=u.slice(0,79)+"\u2026"),U(u)}),t()});var be=nr.resolve(mr,"../uploads");et.existsSync(be)||et.mkdirSync(be,{recursive:!0});var pn=ar({dest:be,limits:{fileSize:200*1024*1024},fileFilter:(r,e,t)=>{["audio/wav","audio/wave","audio/x-wav","audio/mpeg","audio/mp3","audio/flac","audio/x-flac","audio/aac","audio/ogg","audio/m4a","audio/mp4"].includes(e.mimetype)?t(null,!0):t(new Error("Invalid file type. Only audio files are allowed."))}});(async()=>{try{let{checkSystemRequirements:t}=await Promise.resolve().then(()=>(Ge(),Be)),{initDatabase:a}=await Xe().then(()=>Ze);await t(),await a()}catch(t){console.error("\u274C Startup failed:",t instanceof Error?t.message:t),process.exit(1)}j.use(de),j.use("/api",de),j.use("/api",$e),j.use(De),j.use((t,a,n,s)=>{let i=t.status||t.statusCode||500,o=t.message||"Internal Server Error";throw n.status(i).json({message:o}),t});let r=tr(j);new rr({server:r,path:"/ws"}).on("connection",(t,a)=>{U(`WebSocket connection from ${a.socket.remoteAddress}`),t.on("message",n=>{U(`WS \u2190 ${n}`)}),t.on("close",()=>{U("WebSocket connection closed")})}),j.get("env")==="development"?await qe(j,r):Je(j);let e=5e3;r.listen(e,"0.0.0.0",()=>{U(`\u{1F3B5} AudioLabStudio serving on port ${e}`)})})();
